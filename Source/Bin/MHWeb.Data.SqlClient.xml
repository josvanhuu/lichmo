<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MHWeb.Data.SqlClient</name>
    </assembly>
    <members>
        <member name="T:MHWeb.Data.SqlClient.SqlScheduleProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MHWeb.Entities.Schedule"/> entity.
            </summary>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlScheduleProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:MHWeb.Data.SqlClient.SqlScheduleProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlScheduleProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MHWeb.Data.SqlClient.SqlScheduleProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlScheduleProviderBase.Delete(MHWeb.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlScheduleProviderBase.Find(MHWeb.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of MHWeb.Entities.Schedule objects.</returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlScheduleProviderBase.Find(MHWeb.Data.TransactionManager,MHWeb.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:MHWeb.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of MHWeb.Entities.Schedule objects.</returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlScheduleProviderBase.GetAll(MHWeb.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MHWeb.Entities.Schedule objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlScheduleProviderBase.GetPaged(MHWeb.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MHWeb.Entities.Schedule objects.</returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlScheduleProviderBase.GetById(MHWeb.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Calendar index.
            </summary>
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:MHWeb.Entities.Schedule"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlScheduleProviderBase.BulkInsert(MHWeb.Data.TransactionManager,MHWeb.Entities.TList{MHWeb.Entities.Schedule})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the MHWeb.Entities.Schedule object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlScheduleProviderBase.Insert(MHWeb.Data.TransactionManager,MHWeb.Entities.Schedule)">
            <summary>
            	Inserts a MHWeb.Entities.Schedule object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <param name="entity">MHWeb.Entities.Schedule object to insert.</param>
            <remarks>
            	After inserting into the datasource, the MHWeb.Entities.Schedule object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlScheduleProviderBase.Update(MHWeb.Data.TransactionManager,MHWeb.Entities.Schedule)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <param name="entity">MHWeb.Entities.Schedule object to update.</param>
            <remarks>
            	After updating the datasource, the MHWeb.Entities.Schedule object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:MHWeb.Data.SqlClient.SqlScheduleProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MHWeb.Data.SqlClient.SqlScheduleProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MHWeb.Data.SqlClient.SqlScheduleProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:MHWeb.Data.SqlClient.SqlDutyProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MHWeb.Entities.Duty"/> entity.
            </summary>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlDutyProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:MHWeb.Data.SqlClient.SqlDutyProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlDutyProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MHWeb.Data.SqlClient.SqlDutyProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlDutyProviderBase.Delete(MHWeb.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlDutyProviderBase.Find(MHWeb.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of MHWeb.Entities.Duty objects.</returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlDutyProviderBase.Find(MHWeb.Data.TransactionManager,MHWeb.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:MHWeb.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of MHWeb.Entities.Duty objects.</returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlDutyProviderBase.GetAll(MHWeb.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MHWeb.Entities.Duty objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlDutyProviderBase.GetPaged(MHWeb.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MHWeb.Entities.Duty objects.</returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlDutyProviderBase.GetById(MHWeb.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Duty index.
            </summary>
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:MHWeb.Entities.Duty"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlDutyProviderBase.BulkInsert(MHWeb.Data.TransactionManager,MHWeb.Entities.TList{MHWeb.Entities.Duty})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the MHWeb.Entities.Duty object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlDutyProviderBase.Insert(MHWeb.Data.TransactionManager,MHWeb.Entities.Duty)">
            <summary>
            	Inserts a MHWeb.Entities.Duty object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <param name="entity">MHWeb.Entities.Duty object to insert.</param>
            <remarks>
            	After inserting into the datasource, the MHWeb.Entities.Duty object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlDutyProviderBase.Update(MHWeb.Data.TransactionManager,MHWeb.Entities.Duty)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <param name="entity">MHWeb.Entities.Duty object to update.</param>
            <remarks>
            	After updating the datasource, the MHWeb.Entities.Duty object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:MHWeb.Data.SqlClient.SqlDutyProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MHWeb.Data.SqlClient.SqlDutyProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MHWeb.Data.SqlClient.SqlDutyProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:MHWeb.Data.SqlClient.SqlNetTiersProvider">
            <summary>
            This class is the Sql implementation of the NetTiersProvider.
            </summary>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlNetTiersProvider.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:MHWeb.Data.SqlClient.SqlNetTiersProvider"/> class.
            </summary>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlNetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlNetTiersProvider.CreateTransaction">
            <summary>
            Creates a new <see cref="T:MHWeb.Data.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(MHWeb.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(MHWeb.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(MHWeb.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(MHWeb.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(MHWeb.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(MHWeb.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(MHWeb.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(MHWeb.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(MHWeb.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(MHWeb.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(MHWeb.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(MHWeb.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="P:MHWeb.Data.SqlClient.SqlNetTiersProvider.UseStoredProcedure">
            <summary>
            Gets a value indicating whether to use stored procedure or not.
            </summary>
            <value>
            	<c>true</c> if this repository use stored procedures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MHWeb.Data.SqlClient.SqlNetTiersProvider.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MHWeb.Data.SqlClient.SqlNetTiersProvider.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="P:MHWeb.Data.SqlClient.SqlNetTiersProvider.IsTransactionSupported">
            <summary>
             Indicates if the current <see cref="T:MHWeb.Data.Bases.NetTiersProvider"/> implementation supports Transacton.
            </summary>
        </member>
        <member name="P:MHWeb.Data.SqlClient.SqlNetTiersProvider.ScheduleProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MHWeb.Entities.Schedule"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MHWeb.Data.SqlClient.SqlNetTiersProvider.SqlScheduleProvider">
            <summary>
            Gets the current <see cref="P:MHWeb.Data.SqlClient.SqlNetTiersProvider.SqlScheduleProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MHWeb.Data.SqlClient.SqlNetTiersProvider.DoctorProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MHWeb.Entities.Doctor"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MHWeb.Data.SqlClient.SqlNetTiersProvider.SqlDoctorProvider">
            <summary>
            Gets the current <see cref="P:MHWeb.Data.SqlClient.SqlNetTiersProvider.SqlDoctorProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MHWeb.Data.SqlClient.SqlNetTiersProvider.RoomProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MHWeb.Entities.Room"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MHWeb.Data.SqlClient.SqlNetTiersProvider.SqlRoomProvider">
            <summary>
            Gets the current <see cref="P:MHWeb.Data.SqlClient.SqlNetTiersProvider.SqlRoomProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MHWeb.Data.SqlClient.SqlNetTiersProvider.ScienceProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MHWeb.Entities.Science"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MHWeb.Data.SqlClient.SqlNetTiersProvider.SqlScienceProvider">
            <summary>
            Gets the current <see cref="P:MHWeb.Data.SqlClient.SqlNetTiersProvider.SqlScienceProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MHWeb.Data.SqlClient.SqlNetTiersProvider.DutyProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MHWeb.Entities.Duty"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MHWeb.Data.SqlClient.SqlNetTiersProvider.SqlDutyProvider">
            <summary>
            Gets the current <see cref="P:MHWeb.Data.SqlClient.SqlNetTiersProvider.SqlDutyProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="T:MHWeb.Data.SqlClient.SqlDoctorProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MHWeb.Entities.Doctor"/> entity.
            </summary>
        </member>
        <member name="T:MHWeb.Data.SqlClient.SqlDoctorProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MHWeb.Entities.Doctor"/> entity.
            </summary>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlDoctorProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:MHWeb.Data.SqlClient.SqlDoctorProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlDoctorProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MHWeb.Data.SqlClient.SqlDoctorProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlDoctorProviderBase.Delete(MHWeb.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlDoctorProviderBase.Find(MHWeb.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of MHWeb.Entities.Doctor objects.</returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlDoctorProviderBase.Find(MHWeb.Data.TransactionManager,MHWeb.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:MHWeb.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of MHWeb.Entities.Doctor objects.</returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlDoctorProviderBase.GetAll(MHWeb.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MHWeb.Entities.Doctor objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlDoctorProviderBase.GetPaged(MHWeb.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MHWeb.Entities.Doctor objects.</returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlDoctorProviderBase.GetById(MHWeb.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Table_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:MHWeb.Entities.Doctor"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlDoctorProviderBase.BulkInsert(MHWeb.Data.TransactionManager,MHWeb.Entities.TList{MHWeb.Entities.Doctor})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the MHWeb.Entities.Doctor object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlDoctorProviderBase.Insert(MHWeb.Data.TransactionManager,MHWeb.Entities.Doctor)">
            <summary>
            	Inserts a MHWeb.Entities.Doctor object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <param name="entity">MHWeb.Entities.Doctor object to insert.</param>
            <remarks>
            	After inserting into the datasource, the MHWeb.Entities.Doctor object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlDoctorProviderBase.Update(MHWeb.Data.TransactionManager,MHWeb.Entities.Doctor)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <param name="entity">MHWeb.Entities.Doctor object to update.</param>
            <remarks>
            	After updating the datasource, the MHWeb.Entities.Doctor object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:MHWeb.Data.SqlClient.SqlDoctorProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MHWeb.Data.SqlClient.SqlDoctorProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MHWeb.Data.SqlClient.SqlDoctorProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlDoctorProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MHWeb.Data.SqlClient.SqlDoctorProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MHWeb.Data.SqlClient.SqlRoomProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MHWeb.Entities.Room"/> entity.
            </summary>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlRoomProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:MHWeb.Data.SqlClient.SqlRoomProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlRoomProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MHWeb.Data.SqlClient.SqlRoomProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlRoomProviderBase.Delete(MHWeb.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlRoomProviderBase.Find(MHWeb.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of MHWeb.Entities.Room objects.</returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlRoomProviderBase.Find(MHWeb.Data.TransactionManager,MHWeb.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:MHWeb.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of MHWeb.Entities.Room objects.</returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlRoomProviderBase.GetAll(MHWeb.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MHWeb.Entities.Room objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlRoomProviderBase.GetPaged(MHWeb.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MHWeb.Entities.Room objects.</returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlRoomProviderBase.GetById(MHWeb.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Room index.
            </summary>
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:MHWeb.Entities.Room"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlRoomProviderBase.BulkInsert(MHWeb.Data.TransactionManager,MHWeb.Entities.TList{MHWeb.Entities.Room})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the MHWeb.Entities.Room object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlRoomProviderBase.Insert(MHWeb.Data.TransactionManager,MHWeb.Entities.Room)">
            <summary>
            	Inserts a MHWeb.Entities.Room object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <param name="entity">MHWeb.Entities.Room object to insert.</param>
            <remarks>
            	After inserting into the datasource, the MHWeb.Entities.Room object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlRoomProviderBase.Update(MHWeb.Data.TransactionManager,MHWeb.Entities.Room)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <param name="entity">MHWeb.Entities.Room object to update.</param>
            <remarks>
            	After updating the datasource, the MHWeb.Entities.Room object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:MHWeb.Data.SqlClient.SqlRoomProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MHWeb.Data.SqlClient.SqlRoomProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MHWeb.Data.SqlClient.SqlRoomProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:MHWeb.Data.SqlClient.SqlScheduleProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MHWeb.Entities.Schedule"/> entity.
            </summary>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlScheduleProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MHWeb.Data.SqlClient.SqlScheduleProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MHWeb.Data.SqlClient.SqlDutyProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MHWeb.Entities.Duty"/> entity.
            </summary>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlDutyProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MHWeb.Data.SqlClient.SqlDutyProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MHWeb.Data.SqlClient.StoredProcedureProvider">
            <summary>
            Summary description for Procedures.
            </summary>
        </member>
        <member name="M:MHWeb.Data.SqlClient.StoredProcedureProvider.#ctor">
            <summary>
            Creates a new <see cref="T:MHWeb.Data.SqlClient.StoredProcedureProvider"/> instance.
            </summary>
        </member>
        <member name="M:MHWeb.Data.SqlClient.StoredProcedureProvider.Serialize(System.String)">
            <summary>
            Serializes the specified filename.
            </summary>
            <param name="filename">Filename.</param>
        </member>
        <member name="M:MHWeb.Data.SqlClient.StoredProcedureProvider.Deserialize">
            <summary>
            Deserializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.StoredProcedureProvider.GetProcedureBodyFromEmbeddedResource(System.String)">
            <summary>
            Get the query text from the embedded xml file.
            </summary>
            <param name="name">The name of the query.</param>
            <returns>the text of the query</returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Boolean)">
            <summary>
            Get the command wrapper, either from the stored procedures or from the embedded queries.
            </summary>
            <param name="database">The database instance.</param>
            <param name="commandName">the name of the sp.</param>
            <param name="useStoredProcedure">Indicates if we want stored procedure.</param>
            <returns></returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Type,MHWeb.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the command wrapper for a dynamically generated query and
            optionally includes server-side paging.
            </summary>
            <param name="database"></param>
            <param name="commandName"></param>
            <param name="columnEnum"></param>
            <param name="parameters"></param>
            <param name="orderBy"></param>
            <param name="start"></param>
            <param name="pageLength"></param>
            <returns></returns>
        </member>
        <member name="P:MHWeb.Data.SqlClient.StoredProcedureProvider.Current">
            <summary>
            Gets the current <see cref="T:MHWeb.Data.SqlClient.StoredProcedureProvider"/> singleton instance.
            </summary>
            <value><see cref="T:MHWeb.Data.SqlClient.StoredProcedureProvider"/></value>
        </member>
        <member name="P:MHWeb.Data.SqlClient.StoredProcedureProvider.Procedures">
            <summary>
            Gets or sets the procedures.
            </summary>
            <value>An <see cref="T:System.Collections.ArrayList"/> of <see cref="T:MHWeb.Data.SqlClient.Procedure"/> objects.</value>
        </member>
        <member name="P:MHWeb.Data.SqlClient.StoredProcedureProvider.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:MHWeb.Data.SqlClient.Procedure"/> instance with the specified name.
            </summary>
        </member>
        <member name="P:MHWeb.Data.SqlClient.StoredProcedureProvider.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:MHWeb.Data.SqlClient.Procedure"/> instance at the specified index.
            </summary>
        </member>
        <member name="T:MHWeb.Data.SqlClient.Procedure">
            <summary>
            Represents a sql query.
            </summary>
        </member>
        <member name="M:MHWeb.Data.SqlClient.Procedure.#ctor">
            <summary>
            Creates a new <see cref="T:MHWeb.Data.SqlClient.Procedure"/> instance.
            </summary>
        </member>
        <member name="M:MHWeb.Data.SqlClient.Procedure.Parameter(System.String)">
            <summary>
            Get the parameter from the specified name of the param.
            </summary>
            <param name="paramName">Name of the param.</param>
            <returns></returns>
        </member>
        <member name="P:MHWeb.Data.SqlClient.Procedure.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:MHWeb.Data.SqlClient.Procedure.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:MHWeb.Data.SqlClient.Procedure.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value></value>
        </member>
        <member name="P:MHWeb.Data.SqlClient.Procedure.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value></value>
        </member>
        <member name="P:MHWeb.Data.SqlClient.Procedure.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value></value>
        </member>
        <member name="T:MHWeb.Data.SqlClient.Parameter">
            <summary>
            Respresents a query parameter.
            </summary>
        </member>
        <member name="M:MHWeb.Data.SqlClient.Parameter.#ctor">
            <summary>
            Creates a new <see cref="T:MHWeb.Data.SqlClient.Parameter"/> instance.
            </summary>
        </member>
        <member name="P:MHWeb.Data.SqlClient.Parameter.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value></value>
        </member>
        <member name="P:MHWeb.Data.SqlClient.Parameter.SqlType">
            <summary>
            Gets or sets the SqlType.
            </summary>
            <value></value>
        </member>
        <member name="P:MHWeb.Data.SqlClient.Parameter.Direction">
            <summary>
            Gets or sets the Direction.
            </summary>
            <value></value>
        </member>
        <member name="P:MHWeb.Data.SqlClient.Parameter.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value></value>
        </member>
        <member name="P:MHWeb.Data.SqlClient.Parameter.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value></value>
        </member>
        <member name="P:MHWeb.Data.SqlClient.Parameter.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value></value>
        </member>
        <member name="T:MHWeb.Data.SqlClient.SqlScienceProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MHWeb.Entities.Science"/> entity.
            </summary>
        </member>
        <member name="T:MHWeb.Data.SqlClient.SqlScienceProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MHWeb.Entities.Science"/> entity.
            </summary>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlScienceProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:MHWeb.Data.SqlClient.SqlScienceProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlScienceProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MHWeb.Data.SqlClient.SqlScienceProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlScienceProviderBase.Delete(MHWeb.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlScienceProviderBase.Find(MHWeb.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of MHWeb.Entities.Science objects.</returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlScienceProviderBase.Find(MHWeb.Data.TransactionManager,MHWeb.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:MHWeb.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of MHWeb.Entities.Science objects.</returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlScienceProviderBase.GetAll(MHWeb.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MHWeb.Entities.Science objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlScienceProviderBase.GetPaged(MHWeb.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MHWeb.Entities.Science objects.</returns>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlScienceProviderBase.GetById(MHWeb.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Khoa index.
            </summary>
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:MHWeb.Entities.Science"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlScienceProviderBase.BulkInsert(MHWeb.Data.TransactionManager,MHWeb.Entities.TList{MHWeb.Entities.Science})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the MHWeb.Entities.Science object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlScienceProviderBase.Insert(MHWeb.Data.TransactionManager,MHWeb.Entities.Science)">
            <summary>
            	Inserts a MHWeb.Entities.Science object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <param name="entity">MHWeb.Entities.Science object to insert.</param>
            <remarks>
            	After inserting into the datasource, the MHWeb.Entities.Science object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlScienceProviderBase.Update(MHWeb.Data.TransactionManager,MHWeb.Entities.Science)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:MHWeb.Data.TransactionManager"/> object</param>
            <param name="entity">MHWeb.Entities.Science object to update.</param>
            <remarks>
            	After updating the datasource, the MHWeb.Entities.Science object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:MHWeb.Data.SqlClient.SqlScienceProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MHWeb.Data.SqlClient.SqlScienceProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MHWeb.Data.SqlClient.SqlScienceProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlScienceProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MHWeb.Data.SqlClient.SqlScienceProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MHWeb.Data.SqlClient.SqlRoomProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MHWeb.Entities.Room"/> entity.
            </summary>
        </member>
        <member name="M:MHWeb.Data.SqlClient.SqlRoomProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MHWeb.Data.SqlClient.SqlRoomProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
    </members>
</doc>
